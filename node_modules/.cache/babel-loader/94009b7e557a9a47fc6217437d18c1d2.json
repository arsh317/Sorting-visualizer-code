{"ast":null,"code":"import _slicedToArray from \"/home/arshdeep/sorting-vis/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/arshdeep/sorting-vis/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport { getHeapSortAnimations } from '../sortingAlgorithms/heapSort.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSort.js';\nimport './SortingVisualizer.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Nav from 'react-bootstrap/Nav'; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 80; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nconst THIRD_COLOR = 'pink';\nconst FOURTH_COLOR = 'blue';\nvar bar_width = 20;\nconst bar_margin = 2;\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      bar_no: 160,\n      sort_speed: 5\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSpeed = this.handleSpeed.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    var No_arr = this.state.bar_no;\n    bar_width = 0.75 * window.screen.width * window.devicePixelRatio / No_arr - 2 * bar_margin * window.devicePixelRatio;\n    bar_width = Math.floor(bar_width); //var No_arr=(0.7*(window.screen.width)*(window.devicePixelRatio))/(this.state.bar_width+2*this.state.bar_margin);\n    //console.log(window.screen.width);\n\n    for (let i = 0; i < No_arr; i++) {\n      var ht = 0.7 * (window.screen.height * window.devicePixelRatio);\n      array.push(randomIntFromInterval(5, ht));\n    }\n\n    this.setState({\n      array\n    });\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (var i = 0; i < this.state.array.length; i++) {\n      const barstyle = arrayBars[i].style;\n      barstyle.backgroundColor = PRIMARY_COLOR;\n    }\n  }\n\n  handleChange(event) {\n    //var tmp=Math.floor((parseInt(52-event.target.value)));\n    this.setState({\n      bar_no: Math.floor(parseInt(event.target.value))\n    });\n    this.resetArray();\n  }\n\n  handleSpeed(event) {\n    //var tmp=Math.floor((parseInt(52-event.target.value)));\n    this.setState({\n      sort_speed: Math.floor(parseInt(51 - event.target.value))\n    });\n  }\n  /*AdjustArray()\n  {\n      var Slider = document.getElementsByClassName('slider');\n      bar_width=55-Slider.value;\n      console.log(bar_width);onChange={this.handleChange}\n      componentDidMount();\n  }*/\n\n\n  mergeSort() {\n    const ANIMATION_SPEED_MS = this.state.sort_speed;\n    const animations = getMergeSortAnimations(this.state.array);\n    console.log(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const _animations$i = _slicedToArray(animations[i], 2),\n              barOneIdx = _animations$i[0],\n              barTwoIdx = _animations$i[1];\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const _animations$i2 = _slicedToArray(animations[i], 2),\n                barOneIdx = _animations$i2[0],\n                newHeight = _animations$i2[1];\n\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const ANIMATION_SPEED_MS = this.state.sort_speed;\n    const animations = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i3 = _slicedToArray(animations[i], 3),\n            barOneIdx = _animations$i3[0],\n            barTwoIdx = _animations$i3[1],\n            fl = _animations$i3[2];\n\n      const rem = i % 3;\n\n      if (barOneIdx != -1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if (rem != 1) {\n          if (fl == 0) {\n            const color = rem === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n          } else if (fl == 1 && rem == 0) {\n            setTimeout(() => {\n              barOneStyle.backgroundColor = SECONDARY_COLOR;\n              barTwoStyle.backgroundColor = FOURTH_COLOR;\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            setTimeout(() => {\n              barTwoStyle.backgroundColor = PRIMARY_COLOR;\n              barOneStyle.backgroundColor = FOURTH_COLOR;\n            }, i * ANIMATION_SPEED_MS);\n          }\n        } else {\n          setTimeout(() => {\n            const temp1 = barOneStyle.height;\n            const temp2 = barTwoStyle.height;\n            barOneStyle.height = temp2;\n            barTwoStyle.height = temp1;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      } else {\n        const barOneStyle = arrayBars[0].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = FOURTH_COLOR;\n        }, Math.floor(i * 0.34 * ANIMATION_SPEED_MS));\n      }\n    }\n  }\n\n  heapSort() {\n    const ANIMATION_SPEED_MS = this.state.sort_speed;\n    const animations = getHeapSortAnimations(this.state.array);\n    console.log(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i4 = _slicedToArray(animations[i], 2),\n            barOneIdx = _animations$i4[0],\n            barTwoIdx = _animations$i4[1];\n\n      const rem = i % 3;\n\n      if (barOneIdx != -1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if (rem != 1) {\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        } else {\n          setTimeout(() => {\n            const temp1 = barOneStyle.height;\n            const temp2 = barTwoStyle.height;\n            barOneStyle.height = temp2;\n            barTwoStyle.height = temp1;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      } else {\n        const barOneStyle = arrayBars[0].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if (rem == 0) {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = THIRD_COLOR;\n            barTwoStyle.backgroundColor = THIRD_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        } else if (rem == 2) {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n            barTwoStyle.backgroundColor = FOURTH_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        } else {\n          setTimeout(() => {\n            const temp1 = barOneStyle.height;\n            const temp2 = barTwoStyle.height;\n            barOneStyle.height = temp2;\n            barTwoStyle.height = temp1;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    }\n  }\n\n  bubbleSort() {\n    const ANIMATION_SPEED_MS = this.state.sort_speed;\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i5 = _slicedToArray(animations[i], 3),\n            barOneIdx = _animations$i5[0],\n            barTwoIdx = _animations$i5[1],\n            fl = _animations$i5[2];\n\n      const rem = i % 3;\n\n      if (barOneIdx != -1 && rem != 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = rem === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (barOneIdx != -1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          const temp1 = barOneStyle.height;\n          const temp2 = barTwoStyle.height;\n          barOneStyle.height = temp2;\n          barTwoStyle.height = temp1;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = FOURTH_COLOR;\n        }, Math.floor(i * ANIMATION_SPEED_MS));\n      }\n    }\n  } // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getHeapSortAnimations(array);\n      console.log(arraysAreEqual(javaScriptSortedArray, array));\n    }\n  }\n\n  render() {\n    const array = this.state.array;\n    return React.createElement(\"div\", {\n      className: \"main-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      collapseOnSelect: true,\n      expand: \"lg\",\n      bg: \"dark\",\n      variant: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(Navbar.Brand, {\n      href: \"#home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"Sorting-Visualizer\"), React.createElement(Navbar.Toggle, {\n      \"aria-controls\": \"responsive-navbar-nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }), React.createElement(Navbar.Collapse, {\n      id: \"responsive-navbar-nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      className: \"mr-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, \"Generate new Array\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"Adjust Array\"), React.createElement(\"input\", {\n      type: \"range\",\n      className: \"slider\",\n      min: \"10\",\n      max: \"160\",\n      defaultValue: \"50\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Adjust Sorting Speed\"), React.createElement(\"input\", {\n      type: \"range\",\n      className: \"slider\",\n      min: \"1\",\n      max: \"50\",\n      defaultValue: \"5\",\n      onChange: this.handleSpeed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    })), React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"Merge-Sort\"), React.createElement(Nav.Link, {\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"Heap-Sort\"), React.createElement(Nav.Link, {\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"Quick-Sort\"), React.createElement(Nav.Link, {\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"Bubble-Sort\")))), React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: \"\".concat(value, \"px\"),\n        width: \"\".concat(bar_width, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }))));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/arshdeep/sorting-vis/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getHeapSortAnimations","getQuickSortAnimations","getBubbleSortAnimations","Navbar","NavDropdown","Nav","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","THIRD_COLOR","FOURTH_COLOR","bar_width","bar_margin","SortingVisualizer","Component","constructor","props","state","array","bar_no","sort_speed","handleChange","bind","handleSpeed","componentDidMount","resetArray","No_arr","window","screen","width","devicePixelRatio","Math","floor","i","ht","height","push","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","length","barstyle","style","backgroundColor","event","parseInt","target","value","mergeSort","ANIMATION_SPEED_MS","animations","console","log","isColorChange","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","quickSort","fl","rem","temp1","temp2","heapSort","bubbleSort","testSortingAlgorithms","javaScriptSortedArray","slice","sort","a","b","mergeSortedArray","arraysAreEqual","render","map","idx","min","max","random","arrayOne","arrayTwo"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,sBAAR,QAAqC,2CAArC;AACA,SAAQC,qBAAR,QAAoC,kCAApC;AACA,SAAQC,sBAAR,QAAqC,mCAArC;AACA,SAAQC,uBAAR,QAAsC,oCAAtC;AACA,OAAO,yBAAP;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,GAAP,MAAgB,qBAAhB,C,CAEA;;AACA,MAAMC,oBAAoB,GAAG,EAA7B,C,CAEA;;AACA,MAAMC,aAAa,GAAG,WAAtB,C,CAEA;;AACA,MAAMC,eAAe,GAAG,KAAxB;AACA,MAAMC,WAAW,GAAG,MAApB;AACA,MAAMC,YAAY,GAAG,MAArB;AAEA,IAAIC,SAAS,GAAC,EAAd;AACA,MAAMC,UAAU,GAAC,CAAjB;AAEA,eAAe,MAAMC,iBAAN,SAAgCf,KAAK,CAACgB,SAAtC,CAAgD;AAC7DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AACDC,MAAAA,MAAM,EAAC,GADN;AACUC,MAAAA,UAAU,EAAC;AADrB,KAAb;AAIA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACD;;AAIDA,EAAAA,UAAU,GAAG;AACX,UAAMP,KAAK,GAAG,EAAd;AAEA,QAAIQ,MAAM,GAAC,KAAKT,KAAL,CAAWE,MAAtB;AACAR,IAAAA,SAAS,GAAE,OAAMgB,MAAM,CAACC,MAAP,CAAcC,KAApB,GAA4BF,MAAM,CAACG,gBAApC,GAAwDJ,MAAxD,GAAgE,IAAGd,UAAH,GAAgBe,MAAM,CAACG,gBAAjG;AACAnB,IAAAA,SAAS,GAACoB,IAAI,CAACC,KAAL,CAAWrB,SAAX,CAAV,CALW,CAOX;AAEA;;AACA,SAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAApB,EAA4BO,CAAC,EAA7B,EAAiC;AAC/B,UAAIC,EAAE,GAAC,OAAMP,MAAM,CAACC,MAAP,CAAcO,MAAf,GAAwBR,MAAM,CAACG,gBAApC,CAAP;AACAZ,MAAAA,KAAK,CAACkB,IAAN,CAAWC,qBAAqB,CAAC,CAAD,EAAIH,EAAJ,CAAhC;AACD;;AACD,SAAKI,QAAL,CAAc;AAACpB,MAAAA;AAAD,KAAd;AAEA,UAAMqB,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;;AACA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhB,KAAL,CAAWC,KAAX,CAAiBwB,MAArC,EAA6CT,CAAC,EAA9C,EAAkD;AAEhD,YAAMU,QAAQ,GAACJ,SAAS,CAACN,CAAD,CAAT,CAAaW,KAA5B;AACAD,MAAAA,QAAQ,CAACE,eAAT,GAAyBtC,aAAzB;AACD;AACF;;AAEDc,EAAAA,YAAY,CAACyB,KAAD,EAAQ;AAClB;AACA,SAAKR,QAAL,CAAc;AAACnB,MAAAA,MAAM,EAAEY,IAAI,CAACC,KAAL,CAAWe,QAAQ,CAACD,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAnB;AAAT,KAAd;AACA,SAAKxB,UAAL;AACD;;AAEDF,EAAAA,WAAW,CAACuB,KAAD,EAAQ;AACjB;AACA,SAAKR,QAAL,CAAc;AAAClB,MAAAA,UAAU,EAAEW,IAAI,CAACC,KAAL,CAAWe,QAAQ,CAAC,KAAGD,KAAK,CAACE,MAAN,CAAaC,KAAjB,CAAnB;AAAb,KAAd;AACD;AAED;;;;;;;;;AAQAC,EAAAA,SAAS,GAAG;AAEV,UAAMC,kBAAkB,GAAG,KAAKlC,KAAL,CAAWG,UAAtC;AAEA,UAAMgC,UAAU,GAAGrD,sBAAsB,CAAC,KAAKkB,KAAL,CAAWC,KAAZ,CAAzC;AACAmC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKrC,KAAL,CAAWC,KAAvB;;AACA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,UAAU,CAACV,MAA/B,EAAuCT,CAAC,EAAxC,EAA4C;AAC1C,YAAMM,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAMc,aAAa,GAAGtB,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIsB,aAAJ,EAAmB;AAAA,6CACcH,UAAU,CAACnB,CAAD,CADxB;AAAA,cACVuB,SADU;AAAA,cACCC,SADD;;AAEjB,cAAMC,WAAW,GAAGnB,SAAS,CAACiB,SAAD,CAAT,CAAqBZ,KAAzC;AACA,cAAMe,WAAW,GAAGpB,SAAS,CAACkB,SAAD,CAAT,CAAqBb,KAAzC;AACA,cAAMgB,KAAK,GAAG3B,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAczB,eAAd,GAAgCD,aAA9C;AACAsD,QAAAA,UAAU,CAAC,MAAM;AACfH,UAAAA,WAAW,CAACb,eAAZ,GAA8Be,KAA9B;AACAD,UAAAA,WAAW,CAACd,eAAZ,GAA8Be,KAA9B;AACD,SAHS,EAGP3B,CAAC,GAAGkB,kBAHG,CAAV;AAID,OATD,MAWA;AACEU,QAAAA,UAAU,CAAC,MAAM;AAAA,gDACgBT,UAAU,CAACnB,CAAD,CAD1B;AAAA,gBACRuB,SADQ;AAAA,gBACGM,SADH;;AAEf,gBAAMJ,WAAW,GAAGnB,SAAS,CAACiB,SAAD,CAAT,CAAqBZ,KAAzC;AACAc,UAAAA,WAAW,CAACvB,MAAZ,aAAwB2B,SAAxB;AACD,SAJS,EAIP7B,CAAC,GAAGkB,kBAJG,CAAV;AAKD;AACF;AACF;;AAEDY,EAAAA,SAAS,GAAG;AAEV,UAAMZ,kBAAkB,GAAG,KAAKlC,KAAL,CAAWG,UAAtC;AAEA,UAAMgC,UAAU,GAAGnD,sBAAsB,CAAC,KAAKgB,KAAL,CAAWC,KAAZ,CAAzC;;AAGA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,UAAU,CAACV,MAA/B,EAAuCT,CAAC,EAAxC,EAA4C;AAC1C,YAAMM,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;;AAD0C,4CAERW,UAAU,CAACnB,CAAD,CAFF;AAAA,YAEnCuB,SAFmC;AAAA,YAExBC,SAFwB;AAAA,YAEdO,EAFc;;AAI1C,YAAMC,GAAG,GAAGhC,CAAC,GAAG,CAAhB;;AAEA,UAAIuB,SAAS,IAAE,CAAC,CAAhB,EACA;AACE,cAAME,WAAW,GAAGnB,SAAS,CAACiB,SAAD,CAAT,CAAqBZ,KAAzC;AACA,cAAMe,WAAW,GAAGpB,SAAS,CAACkB,SAAD,CAAT,CAAqBb,KAAzC;;AAEA,YAAGqB,GAAG,IAAE,CAAR,EACA;AACE,cAAGD,EAAE,IAAE,CAAP,EACA;AACE,kBAAMJ,KAAK,GAAEK,GAAG,KAAK,CAAR,GAAYzD,eAAZ,GAA8BD,aAA3C;AACAsD,YAAAA,UAAU,CAAC,MAAM;AACfH,cAAAA,WAAW,CAACb,eAAZ,GAA8Be,KAA9B;AACAD,cAAAA,WAAW,CAACd,eAAZ,GAA8Be,KAA9B;AACD,aAHS,EAGP3B,CAAC,GAAGkB,kBAHG,CAAV;AAID,WAPD,MAQK,IAAGa,EAAE,IAAE,CAAJ,IAASC,GAAG,IAAE,CAAjB,EACL;AACEJ,YAAAA,UAAU,CAAC,MAAM;AACfH,cAAAA,WAAW,CAACb,eAAZ,GAA8BrC,eAA9B;AACAmD,cAAAA,WAAW,CAACd,eAAZ,GAA8BnC,YAA9B;AACD,aAHS,EAGPuB,CAAC,GAAGkB,kBAHG,CAAV;AAID,WANI,MAQL;AACEU,YAAAA,UAAU,CAAC,MAAM;AACfF,cAAAA,WAAW,CAACd,eAAZ,GAA8BtC,aAA9B;AACAmD,cAAAA,WAAW,CAACb,eAAZ,GAA8BnC,YAA9B;AACD,aAHS,EAGPuB,CAAC,GAAGkB,kBAHG,CAAV;AAID;AACF,SAxBD,MA0BA;AACEU,UAAAA,UAAU,CAAC,MAAM;AACf,kBAAMK,KAAK,GAACR,WAAW,CAACvB,MAAxB;AACA,kBAAMgC,KAAK,GAACR,WAAW,CAACxB,MAAxB;AACAuB,YAAAA,WAAW,CAACvB,MAAZ,GAAmBgC,KAAnB;AACAR,YAAAA,WAAW,CAACxB,MAAZ,GAAmB+B,KAAnB;AACD,WALS,EAKPjC,CAAC,GAAGkB,kBALG,CAAV;AAMD;AACF,OAvCD,MAyCA;AACE,cAAMO,WAAW,GAAGnB,SAAS,CAAC,CAAD,CAAT,CAAaK,KAAjC;AACA,cAAMe,WAAW,GAAGpB,SAAS,CAACkB,SAAD,CAAT,CAAqBb,KAAzC;AAEAiB,QAAAA,UAAU,CAAC,MAAM;AACfF,UAAAA,WAAW,CAACd,eAAZ,GAA8BnC,YAA9B;AACD,SAFS,EAEPqB,IAAI,CAACC,KAAL,CAAWC,CAAC,GAAE,IAAH,GAAWkB,kBAAtB,CAFO,CAAV;AAGD;AAEF;AAEF;;AAEDiB,EAAAA,QAAQ,GAAG;AAET,UAAMjB,kBAAkB,GAAG,KAAKlC,KAAL,CAAWG,UAAtC;AAEA,UAAMgC,UAAU,GAAGpD,qBAAqB,CAAC,KAAKiB,KAAL,CAAWC,KAAZ,CAAxC;AACAmC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKrC,KAAL,CAAWC,KAAvB;;AAEA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,UAAU,CAACV,MAA/B,EAAuCT,CAAC,EAAxC,EAA4C;AAC1C,YAAMM,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;;AAD0C,4CAEXW,UAAU,CAACnB,CAAD,CAFC;AAAA,YAEnCuB,SAFmC;AAAA,YAExBC,SAFwB;;AAI1C,YAAMQ,GAAG,GAAGhC,CAAC,GAAG,CAAhB;;AAEA,UAAIuB,SAAS,IAAE,CAAC,CAAhB,EAAmB;AACjB,cAAME,WAAW,GAAGnB,SAAS,CAACiB,SAAD,CAAT,CAAqBZ,KAAzC;AACA,cAAMe,WAAW,GAAGpB,SAAS,CAACkB,SAAD,CAAT,CAAqBb,KAAzC;;AAEA,YAAGqB,GAAG,IAAE,CAAR,EACA;AACI,gBAAML,KAAK,GAAG3B,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAczB,eAAd,GAAgCD,aAA9C;AACAsD,UAAAA,UAAU,CAAC,MAAM;AACjBH,YAAAA,WAAW,CAACb,eAAZ,GAA8Be,KAA9B;AACAD,YAAAA,WAAW,CAACd,eAAZ,GAA8Be,KAA9B;AACD,WAHW,EAGT3B,CAAC,GAAGkB,kBAHK,CAAV;AAIH,SAPD,MAOK;AAEDU,UAAAA,UAAU,CAAC,MAAM;AACjB,kBAAMK,KAAK,GAACR,WAAW,CAACvB,MAAxB;AACA,kBAAMgC,KAAK,GAACR,WAAW,CAACxB,MAAxB;AACAuB,YAAAA,WAAW,CAACvB,MAAZ,GAAmBgC,KAAnB;AACAR,YAAAA,WAAW,CAACxB,MAAZ,GAAmB+B,KAAnB;AACD,WALW,EAKTjC,CAAC,GAAGkB,kBALK,CAAV;AAOH;AACF,OArBD,MAqBO;AACL,cAAMO,WAAW,GAAGnB,SAAS,CAAC,CAAD,CAAT,CAAaK,KAAjC;AACA,cAAMe,WAAW,GAAGpB,SAAS,CAACkB,SAAD,CAAT,CAAqBb,KAAzC;;AAEA,YAAGqB,GAAG,IAAE,CAAR,EACA;AACEJ,UAAAA,UAAU,CAAC,MAAM;AACfH,YAAAA,WAAW,CAACb,eAAZ,GAA8BpC,WAA9B;AACAkD,YAAAA,WAAW,CAACd,eAAZ,GAA8BpC,WAA9B;AACD,WAHS,EAGPwB,CAAC,GAAGkB,kBAHG,CAAV;AAID,SAND,MAMM,IAAGc,GAAG,IAAE,CAAR,EAAU;AAEdJ,UAAAA,UAAU,CAAC,MAAM;AACfH,YAAAA,WAAW,CAACb,eAAZ,GAA8BtC,aAA9B;AACAoD,YAAAA,WAAW,CAACd,eAAZ,GAA8BnC,YAA9B;AACD,WAHS,EAGPuB,CAAC,GAAGkB,kBAHG,CAAV;AAKD,SAPK,MAOD;AAEHU,UAAAA,UAAU,CAAC,MAAM;AACf,kBAAMK,KAAK,GAACR,WAAW,CAACvB,MAAxB;AACA,kBAAMgC,KAAK,GAACR,WAAW,CAACxB,MAAxB;AACAuB,YAAAA,WAAW,CAACvB,MAAZ,GAAmBgC,KAAnB;AACAR,YAAAA,WAAW,CAACxB,MAAZ,GAAmB+B,KAAnB;AACD,WALS,EAKPjC,CAAC,GAAGkB,kBALG,CAAV;AAOD;AAEF;AACF;AAEF;;AAEDkB,EAAAA,UAAU,GAAG;AAEX,UAAMlB,kBAAkB,GAAG,KAAKlC,KAAL,CAAWG,UAAtC;AAEA,UAAMgC,UAAU,GAAGlD,uBAAuB,CAAC,KAAKe,KAAL,CAAWC,KAAZ,CAA1C;;AAGA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,UAAU,CAACV,MAA/B,EAAuCT,CAAC,EAAxC,EAA4C;AAC1C,YAAMM,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;;AAD0C,4CAERW,UAAU,CAACnB,CAAD,CAFF;AAAA,YAEnCuB,SAFmC;AAAA,YAExBC,SAFwB;AAAA,YAEdO,EAFc;;AAI1C,YAAMC,GAAG,GAAGhC,CAAC,GAAG,CAAhB;;AAEA,UAAIuB,SAAS,IAAE,CAAC,CAAZ,IAAiBS,GAAG,IAAE,CAA1B,EACA;AACE,cAAMP,WAAW,GAAGnB,SAAS,CAACiB,SAAD,CAAT,CAAqBZ,KAAzC;AACA,cAAMe,WAAW,GAAGpB,SAAS,CAACkB,SAAD,CAAT,CAAqBb,KAAzC;AAEA,cAAMgB,KAAK,GAAEK,GAAG,KAAK,CAAR,GAAYzD,eAAZ,GAA8BD,aAA3C;AACAsD,QAAAA,UAAU,CAAC,MAAM;AACfH,UAAAA,WAAW,CAACb,eAAZ,GAA8Be,KAA9B;AACAD,UAAAA,WAAW,CAACd,eAAZ,GAA8Be,KAA9B;AACD,SAHS,EAGP3B,CAAC,GAAGkB,kBAHG,CAAV;AAID,OAVD,MAWK,IAAGK,SAAS,IAAE,CAAC,CAAf,EACL;AACE,cAAME,WAAW,GAAGnB,SAAS,CAACiB,SAAD,CAAT,CAAqBZ,KAAzC;AACA,cAAMe,WAAW,GAAGpB,SAAS,CAACkB,SAAD,CAAT,CAAqBb,KAAzC;AAEAiB,QAAAA,UAAU,CAAC,MAAM;AACb,gBAAMK,KAAK,GAACR,WAAW,CAACvB,MAAxB;AACA,gBAAMgC,KAAK,GAACR,WAAW,CAACxB,MAAxB;AACAuB,UAAAA,WAAW,CAACvB,MAAZ,GAAmBgC,KAAnB;AACAR,UAAAA,WAAW,CAACxB,MAAZ,GAAmB+B,KAAnB;AACH,SALS,EAKPjC,CAAC,GAAGkB,kBALG,CAAV;AAMD,OAXI,MAaL;AACE,cAAMQ,WAAW,GAAGpB,SAAS,CAACkB,SAAD,CAAT,CAAqBb,KAAzC;AACAiB,QAAAA,UAAU,CAAC,MAAM;AACfF,UAAAA,WAAW,CAACd,eAAZ,GAA8BnC,YAA9B;AACD,SAFS,EAEPqB,IAAI,CAACC,KAAL,CAAWC,CAAC,GAAGkB,kBAAf,CAFO,CAAV;AAGD;AAEF;AAEF,GA/Q4D,CAiR7D;AACA;AACA;;;AACAmB,EAAAA,qBAAqB,GAAG;AACtB,SAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5B,YAAMf,KAAK,GAAG,EAAd;AACA,YAAMwB,MAAM,GAAGL,qBAAqB,CAAC,CAAD,EAAI,IAAJ,CAApC;;AACA,WAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,MAApB,EAA4BT,CAAC,EAA7B,EAAiC;AAC/Bf,QAAAA,KAAK,CAACkB,IAAN,CAAWC,qBAAqB,CAAC,CAAC,IAAF,EAAQ,IAAR,CAAhC;AACD;;AACD,YAAMkC,qBAAqB,GAAGrD,KAAK,CAACsD,KAAN,GAAcC,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAjC,CAA9B;AACA,YAAMC,gBAAgB,GAAG5E,qBAAqB,CAACkB,KAAD,CAA9C;AACAmC,MAAAA,OAAO,CAACC,GAAR,CAAYuB,cAAc,CAACN,qBAAD,EAAwBrD,KAAxB,CAA1B;AACD;AACF;;AAED4D,EAAAA,MAAM,GAAG;AAAA,UACA5D,KADA,GACS,KAAKD,KADd,CACAC,KADA;AAGP,WACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,gBAAgB,MAAxB;AAAyB,MAAA,MAAM,EAAC,IAAhC;AAAqC,MAAA,EAAE,EAAC,MAAxC;AAA+C,MAAA,OAAO,EAAC,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD,CAAQ,KAAR;AAAc,MAAA,IAAI,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI,oBAAC,MAAD,CAAQ,MAAR;AAAe,uBAAc,uBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,MAAD,CAAQ,QAAR;AAAiB,MAAA,EAAE,EAAC,uBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAW,MAAA,OAAO,EAAE,MAAM,KAAKO,UAAL,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGI;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAC,QAA9B;AAAuC,MAAA,GAAG,EAAC,IAA3C;AAAgD,MAAA,GAAG,EAAC,KAApD;AAA0D,MAAA,YAAY,EAAC,IAAvE;AACA,MAAA,QAAQ,EAAE,KAAKJ,YADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BANJ,EAOI;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAC,QAA9B;AAAuC,MAAA,GAAG,EAAC,GAA3C;AAA+C,MAAA,GAAG,EAAC,IAAnD;AAAwD,MAAA,YAAY,EAAC,GAArE;AACA,MAAA,QAAQ,EAAE,KAAKE,WADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADF,EAYE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,OAAO,EAAE,MAAM,KAAK2B,SAAL,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,OAAO,EAAE,MAAM,KAAKkB,QAAL,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,EAGE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,OAAO,EAAE,MAAM,KAAKL,SAAL,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,EAIE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,OAAO,EAAE,MAAM,KAAKM,UAAL,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAJF,CAZF,CAHJ,CADF,EAyBE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGnD,KAAK,CAAC6D,GAAN,CAAU,CAAC9B,KAAD,EAAQ+B,GAAR,KACT;AACE,MAAA,SAAS,EAAC,WADZ;AAEE,MAAA,GAAG,EAAEA,GAFP;AAGE,MAAA,KAAK,EAAE;AACLnC,QAAAA,eAAe,EAAEtC,aADZ;AAEL4B,QAAAA,MAAM,YAAKc,KAAL,OAFD;AAGLpB,QAAAA,KAAK,YAAKlB,SAAL;AAHA,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CAzBF,CADF;AA6CD;;AAjV4D,C,CAoV/D;;AACA,SAAS0B,qBAAT,CAA+B4C,GAA/B,EAAoCC,GAApC,EAAyC;AACvC;AACA,SAAOnD,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACoD,MAAL,MAAiBD,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;;AAED,SAASJ,cAAT,CAAwBO,QAAxB,EAAkCC,QAAlC,EAA4C;AAC1C,MAAID,QAAQ,CAAC1C,MAAT,KAAoB2C,QAAQ,CAAC3C,MAAjC,EAAyC,OAAO,KAAP;;AACzC,OAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmD,QAAQ,CAAC1C,MAA7B,EAAqCT,CAAC,EAAtC,EAA0C;AACxC,QAAImD,QAAQ,CAACnD,CAAD,CAAR,KAAgBoD,QAAQ,CAACpD,CAAD,CAA5B,EAAiC;AAC/B,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getHeapSortAnimations} from '../sortingAlgorithms/heapSort.js';\nimport {getQuickSortAnimations} from '../sortingAlgorithms/quickSort.js';\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/bubbleSort.js';\nimport './SortingVisualizer.css';\nimport Navbar from 'react-bootstrap/Navbar'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Nav from 'react-bootstrap/Nav'\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 80;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\nconst THIRD_COLOR = 'pink';\nconst FOURTH_COLOR = 'blue';\n\nvar bar_width=20;\nconst bar_margin=2;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],bar_no:160,sort_speed:5,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSpeed = this.handleSpeed.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n\n\n  resetArray() {\n    const array = [];\n\n    var No_arr=this.state.bar_no;\n    bar_width=(0.75*(window.screen.width)*(window.devicePixelRatio))/(No_arr)-2*(bar_margin)*(window.devicePixelRatio);\n    bar_width=Math.floor(bar_width);\n\n    //var No_arr=(0.7*(window.screen.width)*(window.devicePixelRatio))/(this.state.bar_width+2*this.state.bar_margin);\n    \n    //console.log(window.screen.width);\n    for (let i = 0; i < No_arr; i++) {\n      var ht=0.7*((window.screen.height)*(window.devicePixelRatio));\n      array.push(randomIntFromInterval(5, ht));\n    }\n    this.setState({array});\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    for (var i = 0; i < this.state.array.length; i++) {\n\n      const barstyle=arrayBars[i].style;\n      barstyle.backgroundColor=PRIMARY_COLOR;       \n    }\n  }\n\n  handleChange(event) {\n    //var tmp=Math.floor((parseInt(52-event.target.value)));\n    this.setState({bar_no: Math.floor(parseInt(event.target.value))});\n    this.resetArray();\n  }\n\n  handleSpeed(event) {\n    //var tmp=Math.floor((parseInt(52-event.target.value)));\n    this.setState({sort_speed: Math.floor(parseInt(51-event.target.value))});\n  }\n\n  /*AdjustArray()\n  {\n      var Slider = document.getElementsByClassName('slider');\n      bar_width=55-Slider.value;\n      console.log(bar_width);onChange={this.handleChange}\n      componentDidMount();\n  }*/\n\n  mergeSort() {\n\n    const ANIMATION_SPEED_MS = this.state.sort_speed;\n    \n    const animations = getMergeSortAnimations(this.state.array);\n    console.log(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } \n      else \n      {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n\n    const ANIMATION_SPEED_MS = this.state.sort_speed;\n    \n    const animations = getQuickSortAnimations(this.state.array);\n    \n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx,fl] = animations[i];\n      \n      const rem = i % 3;\n\n      if (barOneIdx!=-1)\n      {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if(rem!=1)\n        {\n          if(fl==0)\n          {\n            const color=(rem === 0 ? SECONDARY_COLOR : PRIMARY_COLOR);\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n          }\n          else if(fl==1 && rem==0)\n          {\n            setTimeout(() => {\n              barOneStyle.backgroundColor = SECONDARY_COLOR;\n              barTwoStyle.backgroundColor = FOURTH_COLOR;\n            }, i * ANIMATION_SPEED_MS);\n          }\n          else\n          {\n            setTimeout(() => {\n              barTwoStyle.backgroundColor = PRIMARY_COLOR;\n              barOneStyle.backgroundColor = FOURTH_COLOR;              \n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n        else\n        {\n          setTimeout(() => {\n            const temp1=barOneStyle.height;\n            const temp2=barTwoStyle.height;\n            barOneStyle.height=temp2;\n            barTwoStyle.height=temp1;\n          }, i * ANIMATION_SPEED_MS);\n        }      \n      } \n      else\n      {\n        const barOneStyle = arrayBars[0].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = FOURTH_COLOR;\n        }, Math.floor(i*(0.34) * ANIMATION_SPEED_MS) );\n      } \n      \n    }\n\n  }\n\n  heapSort() {\n\n    const ANIMATION_SPEED_MS = this.state.sort_speed;\n\n    const animations = getHeapSortAnimations(this.state.array);\n    console.log(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n\n      const rem = i % 3;\n\n      if (barOneIdx!=-1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if(rem!=1)\n        {\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        }else{\n\n            setTimeout(() => {\n            const temp1=barOneStyle.height;\n            const temp2=barTwoStyle.height;\n            barOneStyle.height=temp2;\n            barTwoStyle.height=temp1;\n          }, i * ANIMATION_SPEED_MS);\n\n        }      \n      } else {\n        const barOneStyle = arrayBars[0].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if(rem==0)\n        {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = THIRD_COLOR;\n            barTwoStyle.backgroundColor = THIRD_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        }else if(rem==2){\n\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n            barTwoStyle.backgroundColor = FOURTH_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n\n        }else{\n\n          setTimeout(() => {\n            const temp1=barOneStyle.height;\n            const temp2=barTwoStyle.height;\n            barOneStyle.height=temp2;\n            barTwoStyle.height=temp1;\n          }, i * ANIMATION_SPEED_MS);\n\n        } \n      \n      }\n    }\n    \n  }\n\n  bubbleSort() {\n\n    const ANIMATION_SPEED_MS = this.state.sort_speed;\n\n    const animations = getBubbleSortAnimations(this.state.array);\n    \n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx,fl] = animations[i];\n      \n      const rem = i % 3;\n\n      if (barOneIdx!=-1 && rem!=1)\n      {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        const color=(rem === 0 ? SECONDARY_COLOR : PRIMARY_COLOR);\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if(barOneIdx!=-1 )\n      {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        setTimeout(() => {\n            const temp1=barOneStyle.height;\n            const temp2=barTwoStyle.height;\n            barOneStyle.height=temp2;\n            barTwoStyle.height=temp1;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else\n      {\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = FOURTH_COLOR;\n        }, Math.floor(i * ANIMATION_SPEED_MS) );\n      }\n      \n    }\n    \n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getHeapSortAnimations(array);\n      console.log(arraysAreEqual(javaScriptSortedArray, array));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"main-container\">\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">Sorting-Visualizer</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <Nav.Link  onClick={() => this.resetArray()} >Generate new Array</Nav.Link>\n                <label>Adjust Array</label>\n                  <input type=\"range\" className=\"slider\" min=\"10\" max=\"160\" defaultValue=\"50\" \n                  onChange={this.handleChange}>\n                  </input>\n                  <label>Adjust Sorting Speed</label>\n                  <input type=\"range\" className=\"slider\" min=\"1\" max=\"50\" defaultValue=\"5\" \n                  onChange={this.handleSpeed}>\n                  </input>\n              </Nav>\n              <Nav>\n                <Nav.Link onClick={() => this.mergeSort()}>Merge-Sort</Nav.Link>\n                <Nav.Link onClick={() => this.heapSort()}>Heap-Sort</Nav.Link>\n                <Nav.Link onClick={() => this.quickSort()}>Quick-Sort</Nav.Link>\n                <Nav.Link onClick={() => this.bubbleSort()}>Bubble-Sort</Nav.Link>            \n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                width: `${bar_width}px`,\n              }}></div>\n          ))}\n          {/*<button onClick={() => this.testSortingAlgorithms()}>\n            Test Sorting Algorithms (BROKEN)\n          </button> */}\n           \n          \n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}"]},"metadata":{},"sourceType":"module"}