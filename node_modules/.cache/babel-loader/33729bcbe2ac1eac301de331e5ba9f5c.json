{"ast":null,"code":"import _slicedToArray from \"/home/arshdeep/sorting-vis/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/arshdeep/sorting-vis/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport { getHeapSortAnimations } from '../sortingAlgorithms/heapSort.js';\nimport './SortingVisualizer.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Nav from 'react-bootstrap/Nav'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 2; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 290; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nconst THIRD_COLOR = 'pink';\nconst FOURTH_COLOR = 'blue';\nconst bar_width = 20;\nconst bar_margin = 2;\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    var No_arr = 0.7 * window.screen.width / (bar_width + 2 * bar_margin);\n\n    for (let i = 0; i < No_arr; i++) {\n      var ht = 0.7 * (window.screen.height * window.devicePixelRatio);\n      array.push(randomIntFromInterval(5, ht));\n    }\n\n    const arraybars = document.getElementsByClassName('array-bar');\n    arraybars.backgroundColor = 'red';\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    console.log(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const _animations$i = _slicedToArray(animations[i], 2),\n              barOneIdx = _animations$i[0],\n              barTwoIdx = _animations$i[1];\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const _animations$i2 = _slicedToArray(animations[i], 2),\n                barOneIdx = _animations$i2[0],\n                newHeight = _animations$i2[1];\n\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    const animations = getHeapSortAnimations(this.state.array);\n    console.log(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i3 = _slicedToArray(animations[i], 2),\n            barOneIdx = _animations$i3[0],\n            barTwoIdx = _animations$i3[1];\n\n      const rem = i % 3;\n\n      if (barOneIdx != -1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if (rem != 1) {\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        } else {\n          setTimeout(() => {\n            const temp1 = barOneStyle.height;\n            const temp2 = barTwoStyle.height;\n            barOneStyle.height = temp2;\n            barTwoStyle.height = temp1;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      } else {\n        const barOneStyle = arrayBars[0].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if (rem == 0) {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = THIRD_COLOR;\n            barTwoStyle.backgroundColor = THIRD_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        } else if (rem == 2) {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n            barTwoStyle.backgroundColor = FOURTH_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        } else {\n          setTimeout(() => {\n            const temp1 = barOneStyle.height;\n            const temp2 = barTwoStyle.height;\n            barOneStyle.height = temp2;\n            barTwoStyle.height = temp1;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    }\n  }\n\n  bubbleSort() {} // We leave it as an exercise to the viewer of this code to implement this method.\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const array = this.state.array;\n    return React.createElement(\"div\", {\n      className: \"main-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      collapseOnSelect: true,\n      expand: \"lg\",\n      bg: \"dark\",\n      variant: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(Navbar.Brand, {\n      href: \"#home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Sorting-Visualizer\"), React.createElement(Navbar.Toggle, {\n      \"aria-controls\": \"responsive-navbar-nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(Navbar.Collapse, {\n      id: \"responsive-navbar-nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      className: \"mr-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Generate new Array\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Adjust Array size\"), React.createElement(\"input\", {\n      type: \"range\",\n      className: \"custom-range\",\n      id: \"customRange\",\n      min: \"5\",\n      max: \"25\",\n      step: \"5\",\n      value: bar_width,\n      onChange: event => this.resetArray({\n        bar_width: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    })), React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Merge-Sort\"), React.createElement(Nav.Link, {\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Heap-Sort\"), React.createElement(Nav.Link, {\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Quick-Sort\"), React.createElement(Nav.Link, {\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Bubble-Sort\")))), React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: \"\".concat(value, \"px\"),\n        width: \"\".concat(bar_width, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }))));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/arshdeep/sorting-vis/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getHeapSortAnimations","Navbar","NavDropdown","Nav","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","THIRD_COLOR","FOURTH_COLOR","bar_width","bar_margin","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","No_arr","window","screen","width","i","ht","height","devicePixelRatio","push","randomIntFromInterval","arraybars","document","getElementsByClassName","backgroundColor","setState","mergeSort","animations","console","log","length","arrayBars","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","newHeight","quickSort","heapSort","rem","temp1","temp2","bubbleSort","testSortingAlgorithms","javaScriptSortedArray","slice","sort","a","b","mergeSortedArray","arraysAreEqual","render","event","target","value","map","idx","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getHeapSortAnimations} from '../sortingAlgorithms/heapSort.js';\nimport './SortingVisualizer.css';\nimport Navbar from 'react-bootstrap/Navbar'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Nav from 'react-bootstrap/Nav'\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 2;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 290;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\nconst THIRD_COLOR = 'pink';\nconst FOURTH_COLOR = 'blue';\n\nconst bar_width=20;\nconst bar_margin=2\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    var No_arr=(0.7*(window.screen.width))/(bar_width+2*bar_margin);\n    for (let i = 0; i < No_arr; i++) {\n      var ht=0.7*((window.screen.height)*(window.devicePixelRatio));\n      array.push(randomIntFromInterval(5, ht));\n    }\n    const arraybars = document.getElementsByClassName('array-bar');\n    arraybars.backgroundColor='red';\n    this.setState({array});\n  }\n\n  mergeSort() {\n    \n    const animations = getMergeSortAnimations(this.state.array);\n    console.log(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n\n    const animations = getHeapSortAnimations(this.state.array);\n    console.log(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n\n      const rem = i % 3;\n\n      if (barOneIdx!=-1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if(rem!=1)\n        {\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        }else{\n\n            setTimeout(() => {\n            const temp1=barOneStyle.height;\n            const temp2=barTwoStyle.height;\n            barOneStyle.height=temp2;\n            barTwoStyle.height=temp1;\n          }, i * ANIMATION_SPEED_MS);\n\n        }      \n      } else {\n        const barOneStyle = arrayBars[0].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if(rem==0)\n        {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = THIRD_COLOR;\n            barTwoStyle.backgroundColor = THIRD_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        }else if(rem==2){\n\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n            barTwoStyle.backgroundColor = FOURTH_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n\n        }else{\n\n          setTimeout(() => {\n            const temp1=barOneStyle.height;\n            const temp2=barTwoStyle.height;\n            barOneStyle.height=temp2;\n            barTwoStyle.height=temp1;\n          }, i * ANIMATION_SPEED_MS);\n\n        } \n      \n      }\n    }\n    \n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"main-container\">\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">Sorting-Visualizer</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <Nav.Link  onClick={() => this.resetArray()} >Generate new Array</Nav.Link>\n                <label>Adjust Array size</label>\n                  <input type=\"range\" className=\"custom-range\" id=\"customRange\" \n                  min=\"5\" max=\"25\" step=\"5\" \n                  value={bar_width}\n                  onChange={event => this.resetArray({ bar_width: event.target.value })} >\n                  </input>\n              </Nav>\n              <Nav>\n                <Nav.Link onClick={() => this.mergeSort()}>Merge-Sort</Nav.Link>\n                <Nav.Link onClick={() => this.heapSort()}>Heap-Sort</Nav.Link>\n                <Nav.Link onClick={() => this.quickSort()}>Quick-Sort</Nav.Link>\n                <Nav.Link onClick={() => this.bubbleSort()}>Bubble-Sort</Nav.Link>            \n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                width: `${bar_width}px`,\n              }}></div>\n          ))}\n          {/*<button onClick={() => this.testSortingAlgorithms()}>\n            Test Sorting Algorithms (BROKEN)\n          </button>\n          */}\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}"]},"metadata":{},"sourceType":"module"}