{"ast":null,"code":"export function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return animations;\n  heapSort(array, animations);\n  return animations;\n}\n\nfunction heapSort(array, animations) {\n  var swap = function (array, firstIndex, secondIndex) {\n    var temp = array[firstIndex];\n    array[firstIndex] = array[secondIndex];\n    array[secondIndex] = temp;\n  };\n\n  function Heapify(array, i, animations) {\n    var l = 2 * i;\n    var r = l + 1;\n    var largest = i;\n\n    if (l < array.heapSize && array[l] > array[largest]) {\n      largest = l;\n    }\n\n    if (r < array.heapSize && array[r] > array[largest]) {\n      largest = r;\n    }\n\n    if (largest != i) {\n      animations.push([i, largest]);\n      animations.push([i, largest]);\n      swap(array, i, largest);\n      Heapify(array, largest, animations);\n    }\n  }\n\n  ;\n\n  function buildHeap(array, animations) {\n    array.heapSize = array.length;\n\n    for (var i = Math.floor(array.length / 2); i >= 0; i--) {\n      Heapify(array, i, animations);\n    }\n  }\n\n  ;\n  buildHeap(array, animations);\n\n  for (var i = array.length - 1; i >= 1; i--) {\n    animations.push([-1, i]);\n    animations.push([-1, i]);\n    swap(array, 0, i);\n    array.heapSize--;\n    Heapify(array, 0, animations);\n  }\n}\n\n;","map":{"version":3,"sources":["/home/arshdeep/sorting-vis/src/sortingAlgorithms/heapSort.js"],"names":["getHeapSortAnimations","array","animations","length","heapSort","swap","firstIndex","secondIndex","temp","Heapify","i","l","r","largest","heapSize","push","buildHeap","Math","floor"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;AAC3C,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOD,UAAP;AACvBE,EAAAA,QAAQ,CAACH,KAAD,EAAOC,UAAP,CAAR;AAEA,SAAOA,UAAP;AAED;;AAED,SAASE,QAAT,CAAkBH,KAAlB,EAAwBC,UAAxB,EAAoC;AAElC,MAAIG,IAAI,GAAG,UAASJ,KAAT,EAAgBK,UAAhB,EAA4BC,WAA5B,EAAyC;AAClD,QAAIC,IAAI,GAAGP,KAAK,CAACK,UAAD,CAAhB;AACAL,IAAAA,KAAK,CAACK,UAAD,CAAL,GAAoBL,KAAK,CAACM,WAAD,CAAzB;AACAN,IAAAA,KAAK,CAACM,WAAD,CAAL,GAAqBC,IAArB;AACD,GAJD;;AAMF,WAASC,OAAT,CAAiBR,KAAjB,EAAwBS,CAAxB,EAA0BR,UAA1B,EAAsC;AAClC,QAAIS,CAAC,GAAG,IAAID,CAAZ;AACA,QAAIE,CAAC,GAAGD,CAAC,GAAG,CAAZ;AACA,QAAIE,OAAO,GAACH,CAAZ;;AACA,QAAIC,CAAC,GAAGV,KAAK,CAACa,QAAV,IAAsBb,KAAK,CAACU,CAAD,CAAL,GAAWV,KAAK,CAACY,OAAD,CAA1C,EAAqD;AACnDA,MAAAA,OAAO,GAAGF,CAAV;AACD;;AACD,QAAIC,CAAC,GAAGX,KAAK,CAACa,QAAV,IAAsBb,KAAK,CAACW,CAAD,CAAL,GAAWX,KAAK,CAACY,OAAD,CAA1C,EAAqD;AACnDA,MAAAA,OAAO,GAAGD,CAAV;AACD;;AACD,QAAIC,OAAO,IAAIH,CAAf,EAAkB;AAChBR,MAAAA,UAAU,CAACa,IAAX,CAAgB,CAACL,CAAD,EAAGG,OAAH,CAAhB;AACAX,MAAAA,UAAU,CAACa,IAAX,CAAgB,CAACL,CAAD,EAAGG,OAAH,CAAhB;AAEAR,MAAAA,IAAI,CAACJ,KAAD,EAAQS,CAAR,EAAWG,OAAX,CAAJ;AACAJ,MAAAA,OAAO,CAACR,KAAD,EAAQY,OAAR,EAAgBX,UAAhB,CAAP;AACD;AACF;;AAAA;;AAED,WAASc,SAAT,CAAmBf,KAAnB,EAAyBC,UAAzB,EAAqC;AACnCD,IAAAA,KAAK,CAACa,QAAN,GAAiBb,KAAK,CAACE,MAAvB;;AACA,SAAK,IAAIO,CAAC,GAAGO,IAAI,CAACC,KAAL,CAAWjB,KAAK,CAACE,MAAN,GAAe,CAA1B,CAAb,EAA2CO,CAAC,IAAI,CAAhD,EAAmDA,CAAC,EAApD,EAAwD;AACtDD,MAAAA,OAAO,CAACR,KAAD,EAAQS,CAAR,EAAUR,UAAV,CAAP;AACD;AACF;;AAAA;AAEDc,EAAAA,SAAS,CAACf,KAAD,EAAOC,UAAP,CAAT;;AAEA,OAAK,IAAIQ,CAAC,GAAGT,KAAK,CAACE,MAAN,GAAa,CAA1B,EAA6BO,CAAC,IAAI,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AAExCR,IAAAA,UAAU,CAACa,IAAX,CAAgB,CAAC,CAAC,CAAF,EAAIL,CAAJ,CAAhB;AACAR,IAAAA,UAAU,CAACa,IAAX,CAAgB,CAAC,CAAC,CAAF,EAAIL,CAAJ,CAAhB;AACAL,IAAAA,IAAI,CAACJ,KAAD,EAAQ,CAAR,EAAWS,CAAX,CAAJ;AACAT,IAAAA,KAAK,CAACa,QAAN;AACAL,IAAAA,OAAO,CAACR,KAAD,EAAQ,CAAR,EAAUC,UAAV,CAAP;AAED;AACF;;AAAA","sourcesContent":["export function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return animations;\n  heapSort(array,animations);\n\n  return animations;\n  \n} \n\nfunction heapSort(array,animations) {\n\n  var swap = function(array, firstIndex, secondIndex) {\n    var temp = array[firstIndex];\n    array[firstIndex] = array[secondIndex];\n    array[secondIndex] = temp;\n  };\n\nfunction Heapify(array, i,animations) {\n    var l = 2 * i;\n    var r = l + 1;\n    var largest=i;\n    if (l < array.heapSize && array[l] > array[largest]) {\n      largest = l;\n    } \n    if (r < array.heapSize && array[r] > array[largest]) {\n      largest = r;\n    }\n    if (largest != i) {\n      animations.push([i,largest]);\n      animations.push([i,largest]);\n\n      swap(array, i, largest);\n      Heapify(array, largest,animations);\n    }\n  };\n\n  function buildHeap(array,animations) {\n    array.heapSize = array.length;\n    for (var i = Math.floor(array.length / 2); i >= 0; i--) {\n      Heapify(array, i,animations);\n    }\n  };\n\n  buildHeap(array,animations);\n\n  for (var i = array.length-1; i >= 1; i--) {\n\n    animations.push([-1,i]);\n    animations.push([-1,i]);\n    swap(array, 0, i);\n    array.heapSize--;\n    Heapify(array, 0,animations);\n\n  }\n};\n "]},"metadata":{},"sourceType":"module"}