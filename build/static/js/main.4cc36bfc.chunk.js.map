{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/bubbleSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getHeapSortAnimations","swap","firstIndex","secondIndex","temp","Heapify","l","r","largest","heapSize","buildHeap","heapSort","getQuickSortAnimations","items","quickSort","left","right","index","pivot","ptr","partition","leftIndex","rightIndex","getBubbleSortAnimations","arr","len","bubble_Sort","bar_width","SortingVisualizer","props","state","bar_no","sort_speed","handleChange","bind","handleSpeed","this","resetArray","No_arr","window","screen","width","devicePixelRatio","ht","height","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","style","backgroundColor","event","parseInt","target","value","ANIMATION_SPEED_MS","console","log","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","fl","rem","temp1","temp2","javaScriptSortedArray","sort","a","b","arraysAreEqual","className","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","onClick","type","min","max","defaultValue","onChange","mergeSort","bubbleSort","map","idx","key","React","Component","random","arrayOne","arrayTwo","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cc36bfc.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n\n","export function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return animations;\n  heapSort(array,animations);\n\n  return animations;\n  \n} \n\nfunction heapSort(array,animations) {\n\n  var swap = function(array, firstIndex, secondIndex) {\n    var temp = array[firstIndex];\n    array[firstIndex] = array[secondIndex];\n    array[secondIndex] = temp;\n  };\n\nfunction Heapify(array, i,animations) {\n    var l = 2 * i;\n    var r = l + 1;\n    var largest=i;\n    if (l < array.heapSize && array[l] > array[largest]) {\n      largest = l;\n    } \n    if (r < array.heapSize && array[r] > array[largest]) {\n      largest = r;\n    }\n    if (largest != i) {\n      animations.push([i,largest]);\n      animations.push([i,largest]);\n      animations.push([i,largest]);\n\n      swap(array, i, largest);\n      Heapify(array, largest,animations);\n    }\n  };\n\n  function buildHeap(array,animations) {\n    array.heapSize = array.length;\n    for (var i = Math.floor(array.length / 2); i >= 0; i--) {\n      Heapify(array, i,animations);\n    }\n  };\n\n  buildHeap(array,animations);\n\n  for (var i = array.length-1; i >= 1; i--) {\n\n    animations.push([-1,i]);\n    animations.push([-1,i]);\n    animations.push([-1,i]);\n    swap(array, 0, i);\n    array.heapSize--;\n    Heapify(array, 0,animations);\n\n  }\n};\n ","export function getQuickSortAnimations(items) {\n  const animations = [];\n  if (items.length <= 1) return animations;\n  quickSort(items,0,items.length-1,animations);\n\n  return animations;\n  \n} \n\nfunction swap(items, leftIndex, rightIndex){\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n}\nfunction partition(items, left, right,animations) {\n    var pivot = items[right], i = left, j = right;\n    var ptr=left; \n\n    //animations.push([-1,right,2]);\n    //animations.push([-1,right,2]);\n    //animations.push([-1,right,2]);\n\n    while (i <right) {\n        if(items[i]<pivot)\n        { \n            animations.push([i,ptr,0]);\n            animations.push([i,ptr,0]);\n            animations.push([i,ptr,0]);\n            swap(items,i,ptr); ptr++; \n\n        }\n        i++;\n    }\n    animations.push([ptr,right,1]);\n    animations.push([ptr,right,1]);\n    animations.push([ptr,right,1]);\n    swap(items,ptr,right)\n    return ptr;\n}\n\nfunction quickSort(items, left, right,animations) {\n\n    if(left>right){ return; }\n    var index = partition(items, left, right,animations);\n    quickSort(items, left, index - 1,animations);\n    quickSort(items, index+1, right,animations);   \n}\n","export function getBubbleSortAnimations(items) {\n  const animations = [];\n  if (items.length <= 1) return animations;\n  bubble_Sort(items,animations);\n\n  return animations;\n  \n} \n\nfunction swap(items, leftIndex, rightIndex){\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n}\n\nfunction bubble_Sort(arr,animations){\n\n    var len = arr.length,\n        i, j, stop;\n\n    for (i=0; i < len; i++){\n        for (j=0; j < (len-i); j++){\n            if (arr[j] > arr[j+1]){\n                animations.push([j,j+1]);\n                animations.push([j,j+1]);\n                animations.push([j,j+1]);\n                swap(arr, j, j+1);\n            }\n        }\n        animations.push([-1,(len-i-1)]);\n        animations.push([-1,(len-i-1)]);\n        animations.push([-1,(len-i-1)]);\n    }\n\n}","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getHeapSortAnimations} from '../sortingAlgorithms/heapSort.js';\nimport {getQuickSortAnimations} from '../sortingAlgorithms/quickSort.js';\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/bubbleSort.js';\nimport './SortingVisualizer.css';\nimport Navbar from 'react-bootstrap/Navbar'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Nav from 'react-bootstrap/Nav'\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 80;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\nconst THIRD_COLOR = 'pink';\nconst FOURTH_COLOR = 'blue';\n\nvar bar_width=20;\nconst bar_margin=2;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],bar_no:160,sort_speed:5,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSpeed = this.handleSpeed.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n\n\n  resetArray() {\n    const array = [];\n\n    var No_arr=this.state.bar_no;\n    bar_width=(0.75*(window.screen.width)*(window.devicePixelRatio))/(No_arr)-2*(bar_margin)*(window.devicePixelRatio);\n    bar_width=Math.floor(bar_width);\n\n    //var No_arr=(0.7*(window.screen.width)*(window.devicePixelRatio))/(this.state.bar_width+2*this.state.bar_margin);\n    \n    //console.log(window.screen.width);\n    for (let i = 0; i < No_arr; i++) {\n      var ht=0.7*((window.screen.height)*(window.devicePixelRatio));\n      array.push(randomIntFromInterval(5, ht));\n    }\n    this.setState({array});\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    for (var i = 0; i < this.state.array.length; i++) {\n\n      const barstyle=arrayBars[i].style;\n      barstyle.backgroundColor=PRIMARY_COLOR;       \n    }\n  }\n\n  handleChange(event) {\n    //var tmp=Math.floor((parseInt(52-event.target.value)));\n    this.setState({bar_no: Math.floor(parseInt(event.target.value))});\n    this.resetArray();\n  }\n\n  handleSpeed(event) {\n    //var tmp=Math.floor((parseInt(52-event.target.value)));\n    this.setState({sort_speed: Math.floor(parseInt(51-event.target.value))});\n  }\n\n  /*AdjustArray()\n  {\n      var Slider = document.getElementsByClassName('slider');\n      bar_width=55-Slider.value;\n      console.log(bar_width);onChange={this.handleChange}\n      componentDidMount();\n  }*/\n\n  mergeSort() {\n\n    const ANIMATION_SPEED_MS = this.state.sort_speed;\n    \n    const animations = getMergeSortAnimations(this.state.array);\n    console.log(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } \n      else \n      {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n\n    const ANIMATION_SPEED_MS = this.state.sort_speed;\n    \n    const animations = getQuickSortAnimations(this.state.array);\n    \n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx,fl] = animations[i];\n      \n      const rem = i % 3;\n\n      if (barOneIdx!=-1)\n      {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if(rem!=1)\n        {\n          if(fl==0)\n          {\n            const color=(rem === 0 ? SECONDARY_COLOR : PRIMARY_COLOR);\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n          }\n          else if(fl==1 && rem==0)\n          {\n            setTimeout(() => {\n              barOneStyle.backgroundColor = SECONDARY_COLOR;\n              barTwoStyle.backgroundColor = FOURTH_COLOR;\n            }, i * ANIMATION_SPEED_MS);\n          }\n          else\n          {\n            setTimeout(() => {\n              barTwoStyle.backgroundColor = PRIMARY_COLOR;\n              barOneStyle.backgroundColor = FOURTH_COLOR;              \n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n        else\n        {\n          setTimeout(() => {\n            const temp1=barOneStyle.height;\n            const temp2=barTwoStyle.height;\n            barOneStyle.height=temp2;\n            barTwoStyle.height=temp1;\n          }, i * ANIMATION_SPEED_MS);\n        }      \n      } \n      else\n      {\n        const barOneStyle = arrayBars[0].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = FOURTH_COLOR;\n        }, Math.floor(i*(0.34) * ANIMATION_SPEED_MS) );\n      } \n      \n    }\n\n  }\n\n  heapSort() {\n\n    const ANIMATION_SPEED_MS = this.state.sort_speed;\n\n    const animations = getHeapSortAnimations(this.state.array);\n    console.log(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx] = animations[i];\n\n      const rem = i % 3;\n\n      if (barOneIdx!=-1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if(rem!=1)\n        {\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        }else{\n\n            setTimeout(() => {\n            const temp1=barOneStyle.height;\n            const temp2=barTwoStyle.height;\n            barOneStyle.height=temp2;\n            barTwoStyle.height=temp1;\n          }, i * ANIMATION_SPEED_MS);\n\n        }      \n      } else {\n        const barOneStyle = arrayBars[0].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        if(rem==0)\n        {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = THIRD_COLOR;\n            barTwoStyle.backgroundColor = THIRD_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        }else if(rem==2){\n\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n            barTwoStyle.backgroundColor = FOURTH_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n\n        }else{\n\n          setTimeout(() => {\n            const temp1=barOneStyle.height;\n            const temp2=barTwoStyle.height;\n            barOneStyle.height=temp2;\n            barTwoStyle.height=temp1;\n          }, i * ANIMATION_SPEED_MS);\n\n        } \n      \n      }\n    }\n    \n  }\n\n  bubbleSort() {\n\n    const ANIMATION_SPEED_MS = this.state.sort_speed;\n\n    const animations = getBubbleSortAnimations(this.state.array);\n    \n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx,fl] = animations[i];\n      \n      const rem = i % 3;\n\n      if (barOneIdx!=-1 && rem!=1)\n      {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        const color=(rem === 0 ? SECONDARY_COLOR : PRIMARY_COLOR);\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if(barOneIdx!=-1 )\n      {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        setTimeout(() => {\n            const temp1=barOneStyle.height;\n            const temp2=barTwoStyle.height;\n            barOneStyle.height=temp2;\n            barTwoStyle.height=temp1;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else\n      {\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = FOURTH_COLOR;\n        }, Math.floor(i * ANIMATION_SPEED_MS) );\n      }\n      \n    }\n    \n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getHeapSortAnimations(array);\n      console.log(arraysAreEqual(javaScriptSortedArray, array));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"main-container\">\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">Sorting-Visualizer</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <Nav.Link  onClick={() => this.resetArray()} >Generate New Array</Nav.Link>\n                <label className=\"sliderlabel\">Array Length : </label>\n                  <input type=\"range\" className=\"slider\" min=\"10\" max=\"160\" defaultValue=\"50\" \n                  onChange={this.handleChange}>\n                  </input>\n                  <label className=\"sliderlabel\">  Sorting Speed : </label>\n                  <input type=\"range\" className=\"slider\" min=\"1\" max=\"50\" defaultValue=\"5\" \n                  onChange={this.handleSpeed}>\n                  </input>\n              </Nav>\n              <Nav>\n                <Nav.Link onClick={() => this.mergeSort()}>Merge-Sort</Nav.Link>\n                <Nav.Link onClick={() => this.heapSort()}>Heap-Sort</Nav.Link>\n                <Nav.Link onClick={() => this.quickSort()}>Quick-Sort</Nav.Link>\n                <Nav.Link onClick={() => this.bubbleSort()}>Bubble-Sort</Nav.Link>            \n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                width: `${bar_width}px`,\n              }}></div>\n          ))}\n          {/*<button onClick={() => this.testSortingAlgorithms()}>\n            Test Sorting Algorithms (BROKEN)\n          </button> */}\n           \n          \n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Nav from 'react-bootstrap/Nav'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer> </SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}